table[i,j]=	
Cell.assigned=0
.lawyer=i (row)
.case=j (col)
.time=data[i][j]

sortedList=vector of cells, order increasing in time var

s.t. [0,x]<=1, [1,x]<=1, [2,x]<=1
If infeasible, then expand

Note: only update a returnable incumbent value if the alloc is feasible

WALKTHRU:

Input matrix of data containing the time to process case (col) by lawyer (row)
-timeData [GOOD]
-this example:
timeData=[[1,2],[3,4]]

cellTable, timeList = organizeData(timeData)
-creates cellTable mirroring the input matrix
-timeList is a sorted list of the cells by they're process time (len = 4)

correct initial values


opimalalloc(-,-,0,[-1,-1],8)
index = 0
prevAlloc=[-1,-1]
prevIncumbent=8
alloc=[-1,-1]
inumbent=0
sumList = [0,0]
table[sortList[0]].assigned=1 => case 0 assigned to lawyer 0

(optionA) = optimalAlloc(<updatedTable>,-,1,[-1,-1],0)
	index=1
	prevAlloc=[-1,-1]
	prevIncumbent=0
	alloc=[0,-1]
	incumbent=1
	sumList=[1,0]

	table[sortList[index]].assigned=1 => case 1 assigned to lawyer 0	

	(optionA) = optimalAlloc(<updatedTable>,-,2,[0,-1],1)
		index=2
		prevAlloc=[0,-1]
		prevIncumbent=1
		alloc=[1,-1]
		incumbent=2
		sumList=[2,0]

		tempSumLaw=2>1
			print("impossible")
		return ([0,-1], 1) = (optionA)

	table[sortList[1]].assigned=0 => case 1 unassigned from lawyer 0
	table[sortList[2]].assigned=1 => case 0 assigned to lawyer 1

	(optionB) = optimalAlloc(<updatedTable>,-,2,[0,-1],1)
		index=2
		prevAlloc=[0,-1]
		prevIncumbent=1
		alloc=[0,0]
		incumbent=4
		sumList=[1,1]

		tempSumCase=2>1
			print("impossible")
		return ([0,-1], 1) = (optionB)

	return ([-1,-1], 8) = (prev)

table[sortList[0]].assigned=0 => case 0 unassigned from lawyer 0
table[sortList[1]].assigned=1 => case 1 assigned to lawyer 0

(optionB) = optimalAlloc(<updatedTable>,-,1,[-1,-1],0)
	index=1
	prevAlloc=[-1,-1]
	prevIncumbent=0
	alloc=[1,-1]
	incumbent=2
	sumList=[1,0]

	table[sortList[1]].assigned=1 => case 1 assigned to lawyer 0	

	(optionA) = optimalAlloc(<updatedTable>,-,2,[1,-1],2)
		index=2
		prevAlloc=[1,-1]
		prevIncumbent=2
		alloc=[1,-1]
		incumbent=2
		sumList=[1,0]
		table[sortList[2]].assigned=1 => case 0 assigned to lawyer 1

		(optionA) = optimalAlloc(<updatedTable>,-,3,[1,-1],2)
			index=3
			prevAlloc=[1,-1]
			prevIncumbent=2
			alloc=[1,0]
			incumbent=5
			sumList=[1,1]
			
			# last variable 
			return (alloc, incumbent) = ([1,0], 5) = (optionA)

		table[sortList[2]].assigned=0 => case 0 unassigned from lawyer 1
		table[sortList[3]].assigned=1 => case 1 assigned to lawyer 1

		(optionB) = optimalAlloc(<updatedTable>,-,3,[1,-1],2)
			index=2
			prevAlloc=[1,-1]
			prevIncumbent=2
			alloc=[1,1]
			incumbent=6
			sumList=[1,1]

			tempSumCase=2>1
				print("impossible")
			return ([1,-1], 2) = (optionB)

		return ([1,0], 5) = (optionA)

	table[sortList[1]].assigned=0 => case 1 unassigned from lawyer 0
	table[sortList[2]].assigned=1 => case 0 assigned to lawyer 1

	(optionB) = optimalAlloc(<updatedTable>,-,2,[1,-1],2)
		index=2
		prevAlloc=[1,-1]
		prevIncumbent=2
		alloc=[-1,0]
		incumbent=3
		sumList=[0,1]

		table[sortList[2]].assigned=1 => case 0 assigned to lawyer 1

		(optionA) = optimalAlloc(<updatedTable>,-,3,[-1,0],3)
			index=3
			prevAlloc=[-1,0]
			prevIncumbent=3
			alloc=[-1,0]
			incumbent=3
			sumList=[0,1]
			
			# last variable 
			return (alloc, incumbent) = ([-1,0], 3) = (optionA)

		table[sortList[2]].assigned=0 => case 0 unassigned from lawyer 1
		table[sortList[3]].assigned=1 => case 1 assigned to lawyer 1

		(optionB) = optimalAlloc(<updatedTable>,-,3,[-1,0],3)
			index=3
			prevAlloc=[-1,0]
			prevIncumbent=3
			alloc=[-1,1]
			incumbent=4
			sumList=[0,1]
			
			# last variable 
			return (alloc, incumbent) = ([-1,1], 4) = (optionB)

		return ([-1,-1], 0) = prev

	return ([1,0], 5) = (optionB)

return ([0,1], 5) = (optionA)

# good, the implementation should find a minimizing solution
# after testing, it does indeed work by the additive algorithm



			












